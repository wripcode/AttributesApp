import { AxiosInstance } from "axios";
import { WebflowRecord } from "../core";
import { Item } from ".";
/**************************************************************
 * Types
 **************************************************************/
export declare type CollectionFieldType = "Bool" | "Color" | "Date" | "ExtFileRef" | "Set" | "ImageRef" | "Set" | "ItemRef" | "ItemRefSet" | "Link" | "Number" | "Option" | "PlainText" | "RichText" | "Video" | "User" | string;
export declare type CollectionField = {
    id: string;
    type: CollectionFieldType;
    slug: string;
    name: string;
    required: boolean;
    editable: boolean;
    validations?: Record<string, any>;
};
/**************************************************************
 * Interfaces
 **************************************************************/
export interface ICollection {
    _id: string;
    lastUpdated: string;
    createdOn: string;
    name: string;
    slug: string;
    singularName: string;
    fields: CollectionField[];
}
/**************************************************************
 * Class
 **************************************************************/
export declare class Collection extends WebflowRecord<ICollection> implements ICollection {
    fields: CollectionField[];
    singularName: string;
    lastUpdated: string;
    createdOn: string;
    _id: string;
    name: string;
    slug: string;
    /**************************************************************
     * Static Methods
     **************************************************************/
    /**
     * Get a list of Collections
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param client The Axios client instance
     * @returns A list of Collections
     */
    static list({ siteId }: {
        siteId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<ICollection[], any>>;
    /**
     * Get a single Collection
     * @param params The params for the request
     * @param params.collectionId The collection ID
     * @param client The Axios client instance
     * @returns A single Collection
     */
    static getOne({ collectionId }: {
        collectionId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<ICollection, any>>;
    /**************************************************************
     * Instance Methods
     **************************************************************/
    /**
     * Get a single Item
     * @param params The params for the request
     * @param params.itemId The Item ID
     * @returns A single Item
     */
    item({ itemId }: {
        itemId: string;
    }): Promise<Item>;
    /**
     * Get a list of Items
     * @param params The params for the request
     * @param params.limit The number of items to return (optional)
     * @param params.offset The number of items to skip (optional)
     * @returns A list of Items
     */
    items({ limit, offset }?: {
        limit?: number;
        offset?: number;
    }): Promise<Item[]>;
    /**
     * Remove a single Item
     * @param params The params for the request
     * @param params.itemId The Item ID
     * @returns The result from the removal
     */
    removeItem({ itemId }: {
        itemId: string;
    }): Promise<import("./item").IItemDelete>;
    /**
     * Create a new Item
     * @param fields The Item fields to create
     * @returns The created Item
     */
    createItem(fields: object): Promise<Item>;
    /**
     * Update a single Item
     * @param params The params for the request
     * @param params.itemId The Item ID
     * @param params.fields The fields to update
     * @returns The updated Item
     */
    updateItem({ itemId, fields }: {
        itemId: string;
        fields: object;
    }): Promise<Item>;
}
