"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collection = void 0;
const core_1 = require("../core");
const _1 = require(".");
/**************************************************************
 * Class
 **************************************************************/
class Collection extends core_1.WebflowRecord {
    /**************************************************************
     * Static Methods
     **************************************************************/
    /**
     * Get a list of Collections
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param client The Axios client instance
     * @returns A list of Collections
     */
    static list({ siteId }, client) {
        (0, core_1.requireArgs)({ siteId });
        const path = `/sites/${siteId}/collections`;
        return client.get(path);
    }
    /**
     * Get a single Collection
     * @param params The params for the request
     * @param params.collectionId The collection ID
     * @param client The Axios client instance
     * @returns A single Collection
     */
    static getOne({ collectionId }, client) {
        (0, core_1.requireArgs)({ collectionId });
        const path = `/collections/${collectionId}`;
        return client.get(path);
    }
    /**************************************************************
     * Instance Methods
     **************************************************************/
    /**
     * Get a single Item
     * @param params The params for the request
     * @param params.itemId The Item ID
     * @returns A single Item
     */
    async item({ itemId }) {
        const res = await _1.Item.getOne({ itemId, collectionId: this._id }, this.client);
        const [item] = res.data.items.map((data) => new _1.Item(this.client, { ...res, data }));
        return item;
    }
    /**
     * Get a list of Items
     * @param params The params for the request
     * @param params.limit The number of items to return (optional)
     * @param params.offset The number of items to skip (optional)
     * @returns A list of Items
     */
    async items({ limit, offset } = {}) {
        const res = await _1.Item.list({ collectionId: this._id, limit, offset }, this.client);
        return res.data.items.map((data) => new _1.Item(this.client, { ...res, data }));
    }
    /**
     * Remove a single Item
     * @param params The params for the request
     * @param params.itemId The Item ID
     * @returns The result from the removal
     */
    async removeItem({ itemId }) {
        const res = await _1.Item.remove({ itemId, collectionId: this._id }, this.client);
        return res.data;
    }
    /**
     * Create a new Item
     * @param fields The Item fields to create
     * @returns The created Item
     */
    async createItem(fields) {
        const res = await _1.Item.create({ collectionId: this._id, fields }, this.client);
        return new _1.Item(this.client, res);
    }
    /**
     * Update a single Item
     * @param params The params for the request
     * @param params.itemId The Item ID
     * @param params.fields The fields to update
     * @returns The updated Item
     */
    async updateItem({ itemId, fields }) {
        const params = { itemId, collectionId: this._id, fields };
        const res = await _1.Item.update(params, this.client);
        return new _1.Item(this.client, res);
    }
}
exports.Collection = Collection;
