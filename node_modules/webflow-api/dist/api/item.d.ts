import { AxiosInstance } from "axios";
import { PaginatedData, WebflowRecord } from "../core";
/**************************************************************
 * Interfaces
 **************************************************************/
export interface IItem {
    _archived: boolean;
    _draft: boolean;
    _id: string;
    _cid: string;
    name: string;
    slug: string;
    "updated-on": string;
    "created-on": string;
    "updated-by": string;
    "created-by": string;
    "published-on"?: string | null;
    "published-by"?: string | null;
}
export interface IItemDelete {
    deleted: number;
}
export interface IPublishItems {
    publishedItemIds: string[];
    errors: string[];
}
export interface IDeletedItems {
    deletedItemIds: string[];
    errors: string[];
}
/**************************************************************
 * Types
 **************************************************************/
export declare type PaginatedItems = PaginatedData & {
    items: IItem[];
};
/**************************************************************
 * Class
 **************************************************************/
export declare class Item extends WebflowRecord<IItem> implements IItem {
    "published-on"?: string | null;
    "published-by"?: string | null;
    "updated-on": string;
    "created-on": string;
    "updated-by": string;
    "created-by": string;
    _archived: boolean;
    _draft: boolean;
    _cid: string;
    name: string;
    slug: string;
    _id: string;
    /**************************************************************
     * Static Methods
     **************************************************************/
    /**
     * Get a single Item
     * @param params The params for the request
     * @param params.collectionId The Collection ID
     * @param params.itemId The Item ID
     * @param client The Axios client instance
     * @returns A single Item
     */
    static getOne({ collectionId, itemId }: {
        collectionId: string;
        itemId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<PaginatedItems, any>>;
    /**
     * Get a list of Items
     * @param params The params for the request
     * @param params.collectionId The Collection ID
     * @param params.limit The number of items to return (optional)
     * @param params.offset The number of items to skip (optional)
     * @param client The Axios client instance
     * @returns A list of Items
     */
    static list({ collectionId, limit, offset }: {
        collectionId: string;
        limit?: number;
        offset?: number;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<PaginatedItems, any>>;
    /**
     * Create a new Item
     * @param params The params for the request
     * @param params.collectionId The Collection ID
     * @param params.fields The Item fields to create
     * @param client The Axios client instance
     * @returns The created Item
     */
    static create({ collectionId, fields }: {
        fields: any;
        collectionId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IItem, any>>;
    /**
     * Update a single Item
     * @param params The params for the request
     * @param params.collectionId The Collection ID
     * @param params.itemId The Item ID
     * @param params.fields The fields to update
     * @param client The Axios client instance
     * @returns The updated Item
     */
    static update({ collectionId, itemId, fields, }: {
        fields: any;
        itemId: string;
        collectionId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IItem, any>>;
    /**
     * Patch a single Item
     * @param params The params for the request
     * @param params.collectionId The Collection ID
     * @param params.itemId The Item ID
     * @param params.fields The fields to patch
     * @param client The Axios client instance
     * @returns The patched Item
     */
    static patch({ collectionId, itemId, fields, }: {
        fields: any;
        itemId: string;
        collectionId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IItem, any>>;
    /**
     * Remove a single Item
     * @param params The params for the request
     * @param params.collectionId The Collection ID
     * @param params.itemId The Item ID
     * @param client The Axios client instance
     * @returns The result from the removal
     */
    static remove({ collectionId, itemId, }: {
        itemId: string;
        collectionId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IItemDelete, any>>;
    /**
     * Unpublish a list of Items
     * @param params The params for the request
     * @param params.collectionId The Collection ID
     * @param params.live Unpublish from the live site
     * @param client The Axios client instance
     * @returns The result of the unpublish
     */
    static unpublish({ collectionId, itemIds, live, }: {
        live?: boolean;
        itemIds: string[];
        collectionId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IDeletedItems, any>>;
    /**
     * Publishes a list of Items
     * @param params The request parameters
     * @param params.collectionId The Collection ID
     * @param params.itemIds The list of Item IDs to publish
     * @param params.live Publish to live site
     * @param client The Axios client instance
     * @returns The result of the publish
     */
    static publish({ itemIds, live, collectionId, }: {
        live?: boolean;
        itemIds: string[];
        collectionId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IPublishItems, any>>;
    /**************************************************************
     * Instance Methods
     **************************************************************/
    /**
     * Update a single Item
     * @param fields The fields to update
     * @returns The updated Item
     */
    update({ ...fields }: {
        [x: string]: any;
    }): Promise<Item>;
    /**
     * Remove a single Item
     * @returns The result from the removal
     */
    remove(): Promise<IItemDelete>;
}
