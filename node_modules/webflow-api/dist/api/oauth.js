"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuth = void 0;
const core_1 = require("../core");
/**************************************************************
 * Class
 **************************************************************/
class OAuth {
    /**
     * Get the URL to authorize a user
     * @param params The params for the request
     * @param params.client_id The OAuth client ID
     * @param params.scope The scope (optional)
     * @param params.state The state (optional)
     * @param params.redirect_uri The redirect URI (optional)
     * @param params.response_type The response type (default: code)
     * @param client The Axios client instance
     * @returns The URL to authorize a user
     */
    static authorizeUrl({ response_type = "code", redirect_uri, client_id, state, scope, scopes }, client) {
        (0, core_1.requireArgs)({ client_id });
        if (scope && scopes) {
            throw new Error("Please provide either 'scope' or 'scopes', but not both.");
        }
        const params = { response_type, client_id };
        if (redirect_uri)
            params["redirect_uri"] = redirect_uri;
        if (state)
            params["state"] = state;
        if (scope)
            params["scope"] = scope;
        if (scopes && scopes.length > 0)
            params["scope"] = scopes.join("+");
        const url = "/oauth/authorize";
        const baseURL = client.defaults.baseURL.replace("api.", "");
        return client.getUri({ baseURL, url, method: "GET", params });
    }
    /**
     * Get an access token
     * @param params The params for the request
     * @param params.code The OAuth code
     * @param params.client_id The OAuth client ID
     * @param params.client_secret The OAuth client secret
     * @param params.redirect_uri The redirect URI (optional)
     * @param params.grant_type The grant type (default: "authorization_code")
     * @param client The Axios client instance
     * @returns An access token
     */
    static accessToken({ grant_type = "authorization_code", client_secret, redirect_uri, client_id, code, }, client) {
        (0, core_1.requireArgs)({ client_id, client_secret, code });
        const path = "/oauth/access_token";
        const data = { client_secret, redirect_uri, grant_type, client_id, code };
        return client.post(path, data);
    }
    /**
     * Revoke an access token
     * @param params The params for the request
     * @param params.client_id The OAuth client ID
     * @param params.client_secret The OAuth client secret
     * @param params.access_token The OAuth access token
     * @param client The Axios client instance
     * @returns The result of the revoke
     */
    static revokeToken({ client_secret, access_token, client_id }, client) {
        (0, core_1.requireArgs)({ client_id, client_secret, access_token });
        const path = "/oauth/revoke_authorization";
        const data = { client_secret, access_token, client_id };
        return client.post(path, data);
    }
}
exports.OAuth = OAuth;
