import { AxiosInstance } from "axios";
import { Webhook, Collection, WebhookFilter } from ".";
import { WebflowRecord } from "../core";
/**************************************************************
 * Interfaces
 *************************************************************/
export interface IDomain {
    _id: string;
    name: string;
}
export interface ISite {
    lastPublished: string;
    previewUrl: string;
    createdOn: string;
    shortName: string;
    timezone: string;
    database: string;
    name: string;
    _id: string;
}
export interface IPublishSite {
    queued: boolean;
}
/**************************************************************
 * Class
 **************************************************************/
export declare class Site extends WebflowRecord<ISite> implements ISite {
    lastPublished: string;
    previewUrl: string;
    createdOn: string;
    shortName: string;
    timezone: string;
    database: string;
    name: string;
    _id: string;
    /**
     * Get a list of Sites
     * @param client The Axios client instance
     * @returns a list of Sites
     */
    static list(client: AxiosInstance): Promise<import("axios").AxiosResponse<ISite[], any>>;
    /**
     * Get a single Site
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.params The query string parameters (optional)
     * @param client The Axios client instance
     * @returns A single Site
     */
    static getOne({ siteId }: {
        siteId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<ISite, any>>;
    /**
     * Publish a site
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.domains The domains to publish to
     * @param client The Axios client instance
     * @returns The publish result
     */
    static publish({ siteId, domains }: {
        siteId: string;
        domains: string[];
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IPublishSite, any>>;
    /**
     * Get a list of domains for a site
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param client The Axios client instance
     * @returns A list of domains
     */
    static domains({ siteId }: {
        siteId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IDomain[], any>>;
    /**************************************************************
     * Instance Methods
     **************************************************************/
    /**
     * Get a list of domains for a site
     * @returns A list of domains
     */
    domains(): Promise<IDomain[]>;
    /**
     * Publish a site
     * @param domains The domains to publish to
     * @returns The publish result
     */
    publishSite(domains: string[]): Promise<IPublishSite>;
    /**
     * Get a single Collection
     * @param params The params for the request
     * @param params.collectionId The collection ID
     * @returns A single Collection
     */
    collection({ collectionId }: {
        collectionId: string;
    }): Promise<Collection>;
    /**
     * Get a list of Collections
     * @returns A list of Collections
     */
    collections(): Promise<Collection[]>;
    /**
     * Get a single Webhook
     * @param params The params for the request
     * @param params.webhookId The webhook ID
     * @returns A single Webhook
     */
    webhook({ webhookId }: {
        webhookId: string;
    }): Promise<Webhook>;
    /**
     * Get a list of Webhooks
     * @returns A list of Webhooks
     */
    webhooks(): Promise<Webhook[]>;
    /**
     * Remove a Webhook
     * @param params The query string parameters (optional)
     * @param params.webhookId The Webhook ID
     * @returns The result of the removal
     */
    removeWebhook({ webhookId }: {
        webhookId: string;
    }): Promise<import("./webhook").IRemoveResult>;
    /**
     * Create a new Webhook
     * @param params The params for the request
     * @param params.url The URL to send the webhook to
     * @param params.triggerType The event to trigger the webhook
     * @param params.filter The filter to apply to the webhook (optional: form_submission only)
     * @returns The created webhook
     */
    createWebhook({ triggerType, filter, url, }: {
        url: string;
        siteId: string;
        triggerType: string;
        filter?: WebhookFilter;
    }): Promise<Webhook>;
}
