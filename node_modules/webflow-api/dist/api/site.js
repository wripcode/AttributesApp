"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Site = void 0;
const _1 = require(".");
const core_1 = require("../core");
/**************************************************************
 * Class
 **************************************************************/
class Site extends core_1.WebflowRecord {
    /**
     * Get a list of Sites
     * @param client The Axios client instance
     * @returns a list of Sites
     */
    static list(client) {
        const path = "/sites";
        return client.get(path);
    }
    /**
     * Get a single Site
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.params The query string parameters (optional)
     * @param client The Axios client instance
     * @returns A single Site
     */
    static getOne({ siteId }, client) {
        (0, core_1.requireArgs)({ siteId });
        const path = `/sites/${siteId}`;
        return client.get(path);
    }
    /**
     * Publish a site
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.domains The domains to publish to
     * @param client The Axios client instance
     * @returns The publish result
     */
    static publish({ siteId, domains }, client) {
        (0, core_1.requireArgs)({ siteId, domains });
        const path = `/sites/${siteId}/publish`;
        return client.post(path, { domains });
    }
    /**
     * Get a list of domains for a site
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param client The Axios client instance
     * @returns A list of domains
     */
    static domains({ siteId }, client) {
        (0, core_1.requireArgs)({ siteId });
        const path = `/sites/${siteId}/domains`;
        return client.get(path);
    }
    /**************************************************************
     * Instance Methods
     **************************************************************/
    /**
     * Get a list of domains for a site
     * @returns A list of domains
     */
    async domains() {
        const res = await Site.domains({ siteId: this._id }, this.client);
        return res.data;
    }
    /**
     * Publish a site
     * @param domains The domains to publish to
     * @returns The publish result
     */
    async publishSite(domains) {
        const res = await Site.publish({ siteId: this._id, domains }, this.client);
        return res.data;
    }
    /**
     * Get a single Collection
     * @param params The params for the request
     * @param params.collectionId The collection ID
     * @returns A single Collection
     */
    async collection({ collectionId }) {
        const res = await _1.Collection.getOne({ collectionId }, this.client);
        return new _1.Collection(this.client, res);
    }
    /**
     * Get a list of Collections
     * @returns A list of Collections
     */
    async collections() {
        const res = await _1.Collection.list({ siteId: this._id }, this.client);
        return res.data.map((data) => new _1.Collection(this.client, { ...res, data }));
    }
    /**
     * Get a single Webhook
     * @param params The params for the request
     * @param params.webhookId The webhook ID
     * @returns A single Webhook
     */
    async webhook({ webhookId }) {
        const res = await _1.Webhook.getOne({ siteId: this._id, webhookId }, this.client);
        return new _1.Webhook(this.client, res);
    }
    /**
     * Get a list of Webhooks
     * @returns A list of Webhooks
     */
    async webhooks() {
        const res = await _1.Webhook.list({ siteId: this._id }, this.client);
        return res.data.map((data) => new _1.Webhook(this.client, { ...res, data }));
    }
    /**
     * Remove a Webhook
     * @param params The query string parameters (optional)
     * @param params.webhookId The Webhook ID
     * @returns The result of the removal
     */
    async removeWebhook({ webhookId }) {
        const res = await _1.Webhook.remove({ siteId: this._id, webhookId }, this.client);
        return res.data;
    }
    /**
     * Create a new Webhook
     * @param params The params for the request
     * @param params.url The URL to send the webhook to
     * @param params.triggerType The event to trigger the webhook
     * @param params.filter The filter to apply to the webhook (optional: form_submission only)
     * @returns The created webhook
     */
    async createWebhook({ triggerType, filter, url, }) {
        const _params = { url, siteId: this._id, triggerType, filter };
        const res = await _1.Webhook.create(_params, this.client);
        return new _1.Webhook(this.client, res);
    }
}
exports.Site = Site;
