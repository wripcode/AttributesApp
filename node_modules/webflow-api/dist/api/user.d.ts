import { AxiosInstance } from "axios";
import { PaginatedData, WebflowRecord } from "../core";
/**************************************************************
 * Interfaces
 **************************************************************/
export interface IUser {
    emailVerified: boolean;
    lastUpdated?: string;
    createdOn: string;
    _id: string;
    data: any;
}
export interface IAcessGroup {
    _id: string;
    name: string;
    shortId: string;
    slug: string;
    createdOn: string;
}
export interface IUserDelete {
    deleted: number;
}
/**************************************************************
 * Types
 **************************************************************/
export declare type PaginatedUsers = PaginatedData & {
    users: IUser[];
};
export declare type PaginatedAccessGroups = PaginatedData & {
    accessGroups: IAcessGroup[];
};
export declare type UserIdParam = {
    siteId: string;
    userId: string;
};
/**************************************************************
 * Class
 **************************************************************/
export declare class User extends WebflowRecord<IUser> implements IUser {
    emailVerified: boolean;
    lastUpdated?: string;
    createdOn: string;
    siteId: string;
    _id: string;
    data: any;
    /**************************************************************
     * Static Methods
     **************************************************************/
    /**
     * Get a list of Users
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.limit The number of items to return (optional)
     * @param params.offset The number of items to skip (optional)
     * @param client The Axios client instance
     * @returns A list of Users
     */
    static list({ siteId, limit, offset }: {
        siteId: string;
        limit?: number;
        offset?: number;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<PaginatedUsers, any>>;
    /**
     * Get a single User
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.userId The user ID
     * @param client The Axios client instance
     * @returns A single User
     */
    static getOne({ siteId, userId }: {
        siteId: string;
        userId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IUser, any>>;
    /**
     * Update a User
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.userId The user ID
     * @param params.data The data to update
     * @param client The Axios client instance
     * @returns The updated User
     */
    static update({ siteId, userId, data, }: {
        data: object;
        siteId: string;
        userId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IUser, any>>;
    /**
     * Invite a User to a site
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.email The email address of the user to invite
     * @param client The Axios client instance
     * @returns The newly created User
     */
    static invite({ siteId, email }: {
        siteId: string;
        email: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IUser, any>>;
    /**
     * Remove a User
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.userId The user ID
     * @param client The Axios client instance
     * @returns The result of the remove
     */
    static remove({ siteId, userId }: {
        siteId: string;
        userId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IUserDelete, any>>;
    /**
     * Get a list of User Access Groups
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.limit The number of items to return (optional)
     * @param params.offset The number of items to skip (optional)
     * @param params.sort The sort order of the groups (optional)
     * @param client The Axios client instance
     * @returns A list of Access Groups
     */
    static accessGroups({ siteId, limit, offset, sort, }: {
        siteId: string;
        limit?: number;
        offset?: number;
        sort?: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<PaginatedAccessGroups, any>>;
    /**************************************************************
     * Instance Methods
     **************************************************************/
    /**
     * Update a User
     * @param data The data to update
     * @returns The updated User
     */
    update(data: any): Promise<User>;
    /**
     * Remove a User
     * @returns The result of the remove
     */
    remove(): Promise<IUserDelete>;
}
