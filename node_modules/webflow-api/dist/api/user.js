"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const core_1 = require("../core");
/**************************************************************
 * Class
 **************************************************************/
class User extends core_1.WebflowRecord {
    /**************************************************************
     * Static Methods
     **************************************************************/
    /**
     * Get a list of Users
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.limit The number of items to return (optional)
     * @param params.offset The number of items to skip (optional)
     * @param client The Axios client instance
     * @returns A list of Users
     */
    static list({ siteId, limit, offset }, client) {
        (0, core_1.requireArgs)({ siteId });
        const params = { limit, offset };
        const path = `/sites/${siteId}/users`;
        return client.get(path, { params });
    }
    /**
     * Get a single User
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.userId The user ID
     * @param client The Axios client instance
     * @returns A single User
     */
    static getOne({ siteId, userId }, client) {
        (0, core_1.requireArgs)({ siteId, userId });
        const path = `/sites/${siteId}/users/${userId}`;
        return client.get(path);
    }
    /**
     * Update a User
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.userId The user ID
     * @param params.data The data to update
     * @param client The Axios client instance
     * @returns The updated User
     */
    static update({ siteId, userId, data, }, client) {
        (0, core_1.requireArgs)({ siteId, userId });
        const path = `/sites/${siteId}/users/${userId}`;
        return client.patch(path, data);
    }
    /**
     * Invite a User to a site
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.email The email address of the user to invite
     * @param client The Axios client instance
     * @returns The newly created User
     */
    static async invite({ siteId, email }, client) {
        (0, core_1.requireArgs)({ siteId, email });
        const path = `/sites/${siteId}/users/invite`;
        return client.post(path, { email });
    }
    /**
     * Remove a User
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.userId The user ID
     * @param client The Axios client instance
     * @returns The result of the remove
     */
    static remove({ siteId, userId }, client) {
        (0, core_1.requireArgs)({ siteId, userId });
        const path = `/sites/${siteId}/users/${userId}`;
        return client.delete(path);
    }
    /**
     * Get a list of User Access Groups
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.limit The number of items to return (optional)
     * @param params.offset The number of items to skip (optional)
     * @param params.sort The sort order of the groups (optional)
     * @param client The Axios client instance
     * @returns A list of Access Groups
     */
    static accessGroups({ siteId, limit, offset, sort, }, client) {
        (0, core_1.requireArgs)({ siteId });
        const params = { limit, offset, sort };
        const path = `/sites/${siteId}/accessgroups`;
        return client.get(path, { params });
    }
    /**************************************************************
     * Instance Methods
     **************************************************************/
    /**
     * Update a User
     * @param data The data to update
     * @returns The updated User
     */
    async update(data) {
        const params = { siteId: this.siteId, userId: this._id, data };
        const res = await User.update(params, this.client);
        return new User(this.client, res);
    }
    /**
     * Remove a User
     * @returns The result of the remove
     */
    async remove() {
        const params = { siteId: this.siteId, userId: this._id };
        const res = await User.remove(params, this.client);
        return res.data;
    }
}
exports.User = User;
