import { AxiosInstance } from "axios";
import { WebflowRecord } from "../core";
/**************************************************************
 * Types
 **************************************************************/
export declare type TriggerType = "form_submission" | "site_publish" | "ecomm_new_order" | "ecomm_order_changed" | "ecomm_inventory_changed" | "collection_item_created" | "collection_item_changed" | "collection_item_deleted" | string;
export declare type WebhookFilter = {
    name: string;
};
/**************************************************************
 * Interfaces
 **************************************************************/
export interface IWebhook {
    triggerType: TriggerType;
    triggerId: string;
    createdOn: string;
    lastUsed?: string;
    site: string;
    _id: string;
    filter?: {
        name: string;
    };
}
export interface IRemoveResult {
    deleted: number;
}
/**************************************************************
 * Class
 **************************************************************/
export declare class Webhook extends WebflowRecord<IWebhook> implements IWebhook {
    filter?: {
        name: string;
    };
    triggerType: string;
    triggerId: string;
    createdOn: string;
    lastUsed?: string;
    site: string;
    _id: string;
    /**************************************************************
     * Static Methods
     **************************************************************/
    /**
     * Get a list of Webhooks
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param client The Axios client instance
     * @returns A list of Webhooks
     */
    static list({ siteId }: {
        siteId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IWebhook[], any>>;
    /**
     * Get a single Webhook
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.webhookId The webhook ID
     * @param client The Axios client instance
     * @returns A single Webhook
     */
    static getOne({ siteId, webhookId }: {
        siteId: string;
        webhookId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IWebhook, any>>;
    /**
     * Create a new Webhook
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.url The URL to send the webhook to
     * @param params.triggerType The event to trigger the webhook
     * @param params.filter The filter to apply to the webhook (optional: form_submission only)
     * @param params.params The query string parameters (optional)
     * @param client The Axios client instance
     * @returns The created webhook
     */
    static create({ triggerType, siteId, filter, url, }: {
        url: string;
        siteId: string;
        filter?: WebhookFilter;
        triggerType: TriggerType;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IWebhook, any>>;
    /**
     * Remove a Webhook
     * @param params The query string parameters (optional)
     * @param params.webhookId The Webhook ID
     * @param params.siteId The Site ID
     * @param client The Axios client instance
     * @returns The result of the removal
     */
    static remove({ siteId, webhookId }: {
        siteId: string;
        webhookId: string;
    }, client: AxiosInstance): Promise<import("axios").AxiosResponse<IRemoveResult, any>>;
    /**************************************************************
     * Instance Methods
     **************************************************************/
    /**
     * Remove a Webhook
     * @returns The result of the removal
     */
    remove(): Promise<IRemoveResult>;
}
