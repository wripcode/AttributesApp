"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhook = void 0;
const core_1 = require("../core");
/**************************************************************
 * Class
 **************************************************************/
class Webhook extends core_1.WebflowRecord {
    /**************************************************************
     * Static Methods
     **************************************************************/
    /**
     * Get a list of Webhooks
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param client The Axios client instance
     * @returns A list of Webhooks
     */
    static list({ siteId }, client) {
        (0, core_1.requireArgs)({ siteId });
        const path = `/sites/${siteId}/webhooks`;
        return client.get(path);
    }
    /**
     * Get a single Webhook
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.webhookId The webhook ID
     * @param client The Axios client instance
     * @returns A single Webhook
     */
    static getOne({ siteId, webhookId }, client) {
        (0, core_1.requireArgs)({ siteId, webhookId });
        const path = `/sites/${siteId}/webhooks/${webhookId}`;
        return client.get(path);
    }
    /**
     * Create a new Webhook
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.url The URL to send the webhook to
     * @param params.triggerType The event to trigger the webhook
     * @param params.filter The filter to apply to the webhook (optional: form_submission only)
     * @param params.params The query string parameters (optional)
     * @param client The Axios client instance
     * @returns The created webhook
     */
    static create({ triggerType, siteId, filter, url, }, client) {
        (0, core_1.requireArgs)({ siteId, triggerType, url });
        const path = `/sites/${siteId}/webhooks`;
        const data = { triggerType, url, filter };
        return client.post(path, data);
    }
    /**
     * Remove a Webhook
     * @param params The query string parameters (optional)
     * @param params.webhookId The Webhook ID
     * @param params.siteId The Site ID
     * @param client The Axios client instance
     * @returns The result of the removal
     */
    static remove({ siteId, webhookId }, client) {
        (0, core_1.requireArgs)({ siteId, webhookId });
        const path = `/sites/${siteId}/webhooks/${webhookId}`;
        return client.delete(path);
    }
    /**************************************************************
     * Instance Methods
     **************************************************************/
    /**
     * Remove a Webhook
     * @returns The result of the removal
     */
    async remove() {
        const params = { siteId: this.site, webhookId: this._id };
        const res = await Webhook.remove(params, this.client);
        return res.data;
    }
}
exports.Webhook = Webhook;
