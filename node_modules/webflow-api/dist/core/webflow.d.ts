import { AxiosRequestConfig } from "axios";
import { PaginationFilter } from "../core";
import { Collection, IAccessTokenParams, IAuthorizeUrlParams, IRevokeTokenParams, User, Site, Webhook, WebhookFilter, Item } from "../api";
export declare const DEFAULT_HOST = "webflow.com";
export declare const USER_AGENT = "Webflow Javascript SDK / 1.0";
export interface Options {
    host?: string;
    token?: string;
    version?: string;
    headers?: Record<string, string>;
    beta?: boolean;
}
export declare const SCOPES_ARRAY: readonly ["assets:read", "assets:write", "authorized_user:read", "cms:read", "cms:write", "custom_code:read", "custom_code:write", "forms:read", "forms:write", "pages:read", "pages:write", "sites:read", "sites:write", "users:read", "users:write", "ecommerce:read", "ecommerce:write"];
export declare type SupportedScope = typeof SCOPES_ARRAY[number];
/**************************************************************
 * Class
 **************************************************************/
export declare class Webflow {
    options: Options;
    private client;
    constructor(options?: Options);
    private removeNonBetaMethods;
    set token(value: string);
    clearToken(): void;
    get config(): AxiosRequestConfig<any>;
    /**************************************************************
     * HTTP Methods
     **************************************************************/
    /**
     * Send a GET request to the Webflow API
     * @param path The path to the endpoint
     * @param params The query parameters (optional)
     * @returns The response from the Webflow API
     */
    get(path: string, params?: Record<string, any>): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Send a DELETE request to the Webflow API
     * @param path The path to the endpoint
     * @param params The query parameters (optional)
     * @returns The response from the Webflow API
     */
    delete(path: string, params?: Record<string, any>): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Send a POST request to create a new Collection
     * @param path The path to the endpoint
     * @param data The data to send
     * @param params The query parameters (optional)
     * @returns The response from the Webflow API
     */
    post(path: string, data: any, params?: Record<string, any>): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Send a PUT request to create a new Collection
     * @param path The path to the endpoint
     * @param data The data to send
     * @param params The query parameters (optional)
     * @returns The response from the Webflow API
     */
    put(path: string, data: any, params?: Record<string, any>): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Send a PATCH request to create a new Collection
     * @param path The path to the endpoint
     * @param data The data to send
     * @param params The query parameters (optional)
     * @returns The response from the Webflow API
     */
    patch(path: string, data: any, params?: Record<string, any>): Promise<import("axios").AxiosResponse<any, any>>;
    /**************************************************************
     * OAuth Endpoints
     **************************************************************/
    /**
     * Create an OAuth Authorization url
     * @param params The OAuth information
     * @param params.state The state parameter (optional)
     * @param params.scope The scope parameter (optional)
     * @param params.client_id The client_id parameter (optional)
     * @param params.redirect_uri The redirect_uri parameter (optional)
     * @param params.response_type The response_type parameter (default: "code")
     * @returns The url to redirect to
     */
    authorizeUrl(params: IAuthorizeUrlParams): string;
    /**
     * Create an OAuth Access Token
     * @param params The OAuth information
     * @param params.code The code parameter
     * @param params.client_id The client_id parameter
     * @param params.client_secret The client_secret parameter
     * @param params.redirect_uri The redirect_uri parameter (optional)
     * @param params.grant_type The grant_type parameter (default: "authorization_code")
     * @returns The access token
     */
    accessToken(params: IAccessTokenParams): Promise<import("../api").IAccessToken>;
    /**
     * Revoke an OAuth Access Token
     * @param params The access token information
     * @param params.access_token The access token
     * @param params.client_id The client_id parameter
     * @param params.client_secret The client_secret parameter
     * @returns The result of the revoked token
     */
    revokeToken(params: IRevokeTokenParams): Promise<import("../api").IRevokeToken>;
    /**************************************************************
     * Meta Endpoints
     **************************************************************/
    /**
     * Get the current authorization information
     * @returns The authorization information
     */
    info(): Promise<import("../api").IAuthenticationInfo>;
    /**
     * Get the current authenticated user
     * @returns The current authenticated user
     */
    authenticatedUser(): Promise<import("../api").IAuthenticatedUser>;
    /**************************************************************
     * Site Endpoints
     **************************************************************/
    /**
     * Get a list of Sites available
     * @returns A list of Sites
     */
    sites(): Promise<Site[]>;
    /**
     * Get a single Site
     * @param params The Site information
     * @param params.siteId The Site ID
     * @returns The Site
     */
    site({ siteId }: {
        siteId: string;
    }): Promise<Site>;
    /**
     * Publish a Site
     * @param params The Site information
     * @param params.siteId The Site ID
     * @param params.domain The domains to publish
     * @returns The result of the publish
     */
    publishSite({ siteId, domains }: {
        siteId: string;
    } & {
        domains: string[];
    }): Promise<import("../api").IPublishSite>;
    /**
     * Get a list of Domains for a Site
     * @param params The Site information
     * @param params.siteId The Site ID
     * @returns A list of Domains
     */
    domains({ siteId }: {
        siteId: string;
    }): Promise<import("../api").IDomain[]>;
    /**************************************************************
     * Collection Endpoints
     **************************************************************/
    /**
     * Get a list of Collections
     * @param params The Site information
     * @param params.siteId The Site ID
     * @returns A list of Collections
     */
    collections({ siteId }: {
        siteId: string;
    }): Promise<Collection[]>;
    /**
     * Get a single Collection
     * @param params The Collection information
     * @param params.collectionId The Collection ID
     * @returns A single Collection
     */
    collection({ collectionId }: {
        collectionId: string;
    }): Promise<Collection>;
    /**************************************************************
     * Item Endpoints
     **************************************************************/
    /**
     * Get a list of Collection Items
     * @param params The Collection information
     * @param params.collectionId The Collection ID
     * @param params.limit The number of items to return
     * @param params.offset The number of items to skip
     * @returns A list of Items
     */
    items({ collectionId, limit, offset }: {
        collectionId: string;
    } & PaginationFilter): Promise<Item[]>;
    /**
     * Get a single Collection Item
     * @param params The Item information
     * @param params.collectionId The Collection ID
     * @param params.itemId The Item ID
     * @returns A single Collection Item
     */
    item({ itemId, collectionId }: {
        itemId: string;
        collectionId: string;
    }): Promise<Item>;
    /**
     * Create a new Collection Item
     * @param params The Item information
     * @param params.collectionId The Collection ID
     * @returns The created Collection Item
     */
    createItem({ collectionId, fields }: {
        collectionId: string;
        fields: any;
    }): Promise<Item>;
    /**
     * Update a Collection Item
     * @param params The Item information
     * @param params.collectionId The Collection ID
     * @param params.itemId The Item ID
     * @param query The query parameters (optional)
     * @returns The updated Collection Item
     */
    updateItem({ collectionId, itemId, ...fields }: {
        itemId: string;
        collectionId: string;
    }): Promise<Item>;
    /**
     * Patch a Collection Item
     * @param params The Item information
     * @param params.collectionId The Collection ID
     * @param params.itemId The Item ID
     * @returns The patched Collection Item
     */
    patchItem({ collectionId, itemId, ...fields }: {
        collectionId: string;
        itemId: string;
    }): Promise<Item>;
    /**
     * Delete a Collection Item
     * @param params The Item information
     * @param params.collectionId The Collection ID
     * @param params.itemId The Item ID
     * @returns The deleted Collection Item result
     */
    removeItem({ collectionId, itemId }: {
        itemId: string;
        collectionId: string;
    }): Promise<import("../api").IItemDelete>;
    /**
     * Unpublish a Collection Item
     * @param params The Item information
     * @param params.collectionId The Collection ID
     * @param params.itemId The Item ID
     * @param params.live Update the live version
     * @returns The unpublished Collection Item result
     */
    deleteItems({ collectionId, itemIds, live, }: {
        collectionId: string;
        itemIds: string[];
        live?: boolean;
    }): Promise<import("../api").IDeletedItems>;
    /**
     * Publish a Collection Item
     * @param params The Item information
     * @param params.collectionId The Collection ID
     * @param params.itemId The Item ID
     * @param params.live Update the live version
     * @returns The Published Collection Item result
     */
    publishItems({ collectionId, itemIds, live, }: {
        collectionId: string;
        itemIds: string[];
        live?: boolean;
    }): Promise<import("../api").IPublishItems>;
    /**************************************************************
     * Membership Endpoints
     **************************************************************/
    /**
     * Get a list of User accounts
     * @param params The Site information
     * @param params.siteId The Site ID
     * @param pageParams The pagination information (optional)
     * @returns A list of User accounts
     */
    users({ siteId }: {
        siteId: string;
    }, pageParams?: PaginationFilter): Promise<User[]>;
    /**
     * Get a single User account
     * @param param The Site and User information
     * @param param.siteId The Site ID
     * @param param.userId The User ID
     * @returns The User information
     */
    user({ siteId, userId }: {
        siteId: string;
        userId: string;
    }): Promise<User>;
    /**
     * Update a User account
     * @param params The Site and User information
     * @param params.siteId The Site ID
     * @param params.userId The User ID
     * @returns The updated User
     */
    updateUser({ siteId, userId, ...data }: {
        siteId: string;
        userId: string;
        data: any;
    }): Promise<User>;
    /**
     * Invite a User to a Site
     * @param params The Site and User information
     * @param params.siteId The Site ID
     * @param params.email The User's email address
     * @returns The created User account
     */
    inviteUser({ siteId, email }: {
        siteId: string;
        email: string;
    }): Promise<User>;
    /**
     * Remove a user from a Site
     * @param params The Site and User information
     * @param params.siteId The Site ID
     * @param params.userId The User ID
     * @returns The result from the remove request
     */
    removeUser({ siteId, userId }: {
        siteId: string;
        userId: string;
    }): Promise<import("../api").IUserDelete>;
    /**
     * Get a list of User Access Groups
     * @param params The params for the request
     * @param params.siteId The site ID
     * @param params.limit The number of items to return (optional)
     * @param params.offset The number of items to skip (optional)
     * @param params.sort The sort order of the groups (optional)
     * @returns A list of Access Groups
     */
    accessGroups({ siteId, limit, offset, sort, }: {
        siteId: string;
        limit?: number;
        offset?: number;
        sort?: string;
    }): Promise<import("../api").PaginatedAccessGroups>;
    /**************************************************************
     * Webhook Endpoints
     **************************************************************/
    /**
     * Get a list of webhooks for a Site
     * @param params The site information to get the Webhooks from
     * @param params.siteId The Site ID
     * @returns A list of Webhooks
     */
    webhooks({ siteId }: {
        siteId: string;
    }): Promise<Webhook[]>;
    /**
     * Get a single Webhook
     * @param params The Webhook and Site information
     * @param params.siteId The Site Id
     * @param params.webhookId The Webhook Id
     * @returns The Webhook
     */
    webhook({ siteId, webhookId }: {
        siteId: string;
        webhookId: string;
    }): Promise<Webhook>;
    /**
     * Remove a Webhook
     * @param params The Webhook and Site information
     * @param params.siteId The Site Id
     * @param params.webhookId The Webhook Id
     * @returns the result from the remove request
     */
    removeWebhook({ siteId, webhookId }: {
        siteId: string;
        webhookId: string;
    }): Promise<import("../api").IRemoveResult>;
    /**
     * Create a Webhook
     * @param params The params to create a webhooks
     * @param params.siteId The Site Id
     * @param params.url The Url the Webhook should call on events
     * @param params.triggerType The type of event that should trigger the Webhook
     * @param params.filter The filter to apply to the Webhook (form_submission only)
     * @returns The created webhook
     */
    createWebhook({ url, siteId, triggerType, filter, }: {
        url: string;
        siteId: string;
        triggerType: string;
        filter?: WebhookFilter;
    }): Promise<Webhook>;
}
